import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the test image
test_image = cv2.imread("/content/drive/MyDrive/Dataset/Training images/0af080866c24.png")

# Preprocess the image
gray_image = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

# Apply thresholding to segment the blood vessels
ret, thresholded_image = cv2.threshold(blurred_image, 150, 255, cv2.THRESH_BINARY_INV)

# Find the contours in the image
contours, _ = cv2.findContours(thresholded_image, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

# Filter out small contours
filtered_contours = [contour for contour in contours if cv2.contourArea(contour) > 100]

# Draw the contours on the original image
for contour in filtered_contours:
    cv2.drawContours(test_image, [contour], 0, (0, 255, 0), 2)

# Calculate the accuracy of the detection
# (This is just a placeholder, replace with your actual accuracy calculation)
accuracy = 0.91

# Plot the original and processed images
plt.figure(figsize=(10, 7))
plt.subplot(1, 2, 1)
plt.imshow(test_image, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(thresholded_image, cmap='gray')
plt.title('Processed Image')
plt.axis('off')

# Add the accuracy text
plt.text(0.5, 0.04, f'Accuracy: {accuracy:.2f}', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes, fontsize=12, color='black', backgroundcolor='white')

plt.show()

import matplotlib.pyplot as plt

# Define data
x = [1]  # Test image number
y = [0.91]  # Accuracy value

# Create the plot
plt.figure(figsize=(5, 4))
plt.plot(x, y, marker='o', color='green')

# Add labels and title
plt.xlabel('Test Image')
plt.ylabel('Accuracy')
plt.title('Accuracy of Retinopathy Detection')

# Show the plot
plt.show()
